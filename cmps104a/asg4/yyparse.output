Terminals unused in grammar

   TOK_ALLOCATOR
   TOK_BASETYPE
   TOK_VAR
   TOK_CONSTANT
   TOK_FUNCTION
   TOK_TYPE
   TOK_PROTOTYPE
   TOK_BINOP
   TOK_UNOP
   TOK_DECLID
   TOK_VARDECL
   TOK_RETURNVOID
   TOK_ARRAY
   TOK_ROOT
   TOK_PARAMLIST
   TOK_TIM
   TOK_TIMER
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_TYPEID
   TOK_FIELD


State 18 conflicts: 1 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: structh '}'
    9          | structh strdecl ';' '}'

   10 structh: TOK_STRUCT typedecl '{'

   11 typedecl: TOK_IDENT

   12 strdecl: strdecl ';' fielddecl
   13        | fielddecl

   14 fielddecl: type fielddeclid

   15 fielddeclid: TOK_IDENT

   16 identdecl: type identdeclid

   17 identdeclid: TOK_IDENT

   18 type: basetype TOK_NEWARRAY
   19     | basetype

   20 basetype: TOK_VOID
   21         | TOK_BOOL
   22         | TOK_CHAR
   23         | TOK_INT
   24         | TOK_STRING
   25         | typeid

   26 typeid: TOK_IDENT

   27 params: params ',' identdecl
   28       | '(' identdecl
   29       | '('

   30 function: identdecl params ')' block
   31         | identdecl params ')' ';'

   32 block: '{' '}'
   33      | '{' stmts '}'

   34 stmts: stmts statement
   35      | statement

   36 statement: block
   37          | vardecl
   38          | while
   39          | ifelse
   40          | return
   41          | expr ';'
   42          | ';'

   43 vardecl: identdecl '=' expr ';'

   44 while: TOK_WHILE '(' expr ')' statement

   45 ifelse: TOK_IF '(' expr ')' statement
   46       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   47 return: TOK_RETURN ';'
   48       | TOK_RETURN expr ';'

   49 expr: binop
   50     | unop
   51     | allocator
   52     | call
   53     | '(' expr ')'
   54     | variable
   55     | constant

   56 binop: expr '=' expr
   57      | expr TOK_EQ expr
   58      | expr TOK_NE expr
   59      | expr TOK_LT expr
   60      | expr TOK_LE expr
   61      | expr TOK_GT expr
   62      | expr TOK_GE expr
   63      | expr '+' expr
   64      | expr '-' expr
   65      | expr '*' expr
   66      | expr '/' expr
   67      | expr '%' expr

   68 unop: '+' expr
   69     | '-' expr
   70     | '!' expr
   71     | TOK_ORD expr
   72     | TOK_CHR expr

   73 allocator: TOK_NEW typeid '(' ')'
   74          | TOK_NEW TOK_STRING '(' expr ')'
   75          | TOK_NEW basetype '[' expr ']'
   76          | basetype '[' expr ']'

   77 exprs: exprs ',' expr
   78      | expr

   79 callfront: TOK_IDENT '('

   80 call: callfront ')'
   81     | callfront exprs ')'

   82 variable: TOK_IDENT
   83         | expr '[' expr ']'
   84         | expr '.' fielddeclid

   85 constant: TOK_INTCON
   86         | TOK_CHARCON
   87         | TOK_STRINGCON
   88         | TOK_FALSE
   89         | TOK_TRUE
   90         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 70
'%' (37) 67
'(' (40) 28 29 44 45 46 53 73 74 79
')' (41) 30 31 44 45 46 53 73 74 80 81
'*' (42) 65
'+' (43) 63 68
',' (44) 27 77
'-' (45) 64 69
'.' (46) 84
'/' (47) 66
';' (59) 6 9 12 31 41 42 43 47 48
'=' (61) 43 56
'[' (91) 75 76 83
']' (93) 75 76 83
'{' (123) 10 32 33
'}' (125) 5 8 9 32 33
error (256) 5 6
TOK_ALLOCATOR (258)
TOK_BASETYPE (259)
TOK_VAR (260)
TOK_CONSTANT (261)
TOK_FUNCTION (262)
TOK_TYPE (263)
TOK_PROTOTYPE (264)
TOK_BINOP (265)
TOK_UNOP (266)
TOK_DECLID (267)
TOK_VARDECL (268)
TOK_RETURNVOID (269)
TOK_VOID (270) 20
TOK_BOOL (271) 21
TOK_CHAR (272) 22
TOK_INT (273) 23
TOK_STRING (274) 24 74
TOK_IF (275) 45 46
TOK_ELSE (276) 46
TOK_WHILE (277) 44
TOK_RETURN (278) 47 48
TOK_STRUCT (279) 10
TOK_FALSE (280) 88
TOK_TRUE (281) 89
TOK_NULL (282) 90
TOK_NEW (283) 73 74 75
TOK_ARRAY (284)
TOK_EQ (285) 57
TOK_NE (286) 58
TOK_LT (287) 59
TOK_LE (288) 60
TOK_GT (289) 61
TOK_GE (290) 62
TOK_IDENT (291) 11 15 17 26 79 82
TOK_INTCON (292) 85
TOK_CHARCON (293) 86
TOK_STRINGCON (294) 87
TOK_ORD (295) 71
TOK_CHR (296) 72
TOK_ROOT (297)
TOK_PARAMLIST (298)
TOK_TIM (299)
TOK_TIMER (300)
TOK_BLOCK (301)
TOK_CALL (302)
TOK_IFELSE (303)
TOK_INITDECL (304)
TOK_POS (305)
TOK_NEG (306)
TOK_NEWARRAY (307) 18
TOK_TYPEID (308)
TOK_FIELD (309)


Nonterminals, with rules where they appear

$accept (71)
    on left: 0
start (72)
    on left: 1, on right: 0
program (73)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (74)
    on left: 8 9, on right: 2
structh (75)
    on left: 10, on right: 8 9
typedecl (76)
    on left: 11, on right: 10
strdecl (77)
    on left: 12 13, on right: 9 12
fielddecl (78)
    on left: 14, on right: 12 13
fielddeclid (79)
    on left: 15, on right: 14 84
identdecl (80)
    on left: 16, on right: 27 28 30 31 43
identdeclid (81)
    on left: 17, on right: 16
type (82)
    on left: 18 19, on right: 14 16
basetype (83)
    on left: 20 21 22 23 24 25, on right: 18 19 75 76
typeid (84)
    on left: 26, on right: 25 73
params (85)
    on left: 27 28 29, on right: 27 30 31
function (86)
    on left: 30 31, on right: 3
block (87)
    on left: 32 33, on right: 30 36
stmts (88)
    on left: 34 35, on right: 33 34
statement (89)
    on left: 36 37 38 39 40 41 42, on right: 4 34 35 44 45 46
vardecl (90)
    on left: 43, on right: 37
while (91)
    on left: 44, on right: 38
ifelse (92)
    on left: 45 46, on right: 39
return (93)
    on left: 47 48, on right: 40
expr (94)
    on left: 49 50 51 52 53 54 55, on right: 41 43 44 45 46 48 53 56
    57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 74 75 76 77 78
    83 84
binop (95)
    on left: 56 57 58 59 60 61 62 63 64 65 66 67, on right: 49
unop (96)
    on left: 68 69 70 71 72, on right: 50
allocator (97)
    on left: 73 74 75 76, on right: 51
exprs (98)
    on left: 77 78, on right: 77 81
callfront (99)
    on left: 79, on right: 80 81
call (100)
    on left: 80 81, on right: 52
variable (101)
    on left: 82 83 84, on right: 54
constant (102)
    on left: 85 86 87 88 89 90, on right: 55


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    structh    go to state 31
    identdecl  go to state 32
    type       go to state 33
    basetype   go to state 34
    typeid     go to state 35
    function   go to state 36
    block      go to state 37
    statement  go to state 38
    vardecl    go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42
    expr       go to state 43
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 51
    ';'  shift, and go to state 52


state 5

   20 basetype: TOK_VOID .

    $default  reduce using rule 20 (basetype)


state 6

   21 basetype: TOK_BOOL .

    $default  reduce using rule 21 (basetype)


state 7

   22 basetype: TOK_CHAR .

    $default  reduce using rule 22 (basetype)


state 8

   23 basetype: TOK_INT .

    $default  reduce using rule 23 (basetype)


state 9

   24 basetype: TOK_STRING .

    $default  reduce using rule 24 (basetype)


state 10

   45 ifelse: TOK_IF . '(' expr ')' statement
   46       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 53


state 11

   44 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 54


state 12

   47 return: TOK_RETURN . ';'
   48       | TOK_RETURN . expr ';'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 55

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 57
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 13

   10 structh: TOK_STRUCT . typedecl '{'

    TOK_IDENT  shift, and go to state 58

    typedecl  go to state 59


state 14

   88 constant: TOK_FALSE .

    $default  reduce using rule 88 (constant)


state 15

   89 constant: TOK_TRUE .

    $default  reduce using rule 89 (constant)


state 16

   90 constant: TOK_NULL .

    $default  reduce using rule 90 (constant)


state 17

   73 allocator: TOK_NEW . typeid '(' ')'
   74          | TOK_NEW . TOK_STRING '(' expr ')'
   75          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 60
    TOK_IDENT   shift, and go to state 61

    basetype  go to state 62
    typeid    go to state 63


state 18

   26 typeid: TOK_IDENT .
   79 callfront: TOK_IDENT . '('
   82 variable: TOK_IDENT .

    '('  shift, and go to state 64

    TOK_IDENT     reduce using rule 26 (typeid)
    TOK_NEWARRAY  reduce using rule 26 (typeid)
    '['           reduce using rule 26 (typeid)
    '['           [reduce using rule 82 (variable)]
    $default      reduce using rule 82 (variable)


state 19

   85 constant: TOK_INTCON .

    $default  reduce using rule 85 (constant)


state 20

   86 constant: TOK_CHARCON .

    $default  reduce using rule 86 (constant)


state 21

   87 constant: TOK_STRINGCON .

    $default  reduce using rule 87 (constant)


state 22

   71 unop: TOK_ORD . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 65
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 23

   72 unop: TOK_CHR . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 66
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 24

   68 unop: '+' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 67
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 25

   69 unop: '-' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 68
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 26

   70 unop: '!' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 69
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 27

   53 expr: '(' . expr ')'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 70
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 28

   42 statement: ';' .

    $default  reduce using rule 42 (statement)


state 29

   32 block: '{' . '}'
   33      | '{' . stmts '}'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 71
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    identdecl  go to state 72
    type       go to state 33
    basetype   go to state 34
    typeid     go to state 35
    block      go to state 37
    stmts      go to state 73
    statement  go to state 74
    vardecl    go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42
    expr       go to state 43
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 31

    8 structdef: structh . '}'
    9          | structh . strdecl ';' '}'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 61
    '}'         shift, and go to state 75

    strdecl    go to state 76
    fielddecl  go to state 77
    type       go to state 78
    basetype   go to state 79
    typeid     go to state 35


state 32

   30 function: identdecl . params ')' block
   31         | identdecl . params ')' ';'
   43 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 80
    '('  shift, and go to state 81

    params  go to state 82


state 33

   16 identdecl: type . identdeclid

    TOK_IDENT  shift, and go to state 83

    identdeclid  go to state 84


state 34

   18 type: basetype . TOK_NEWARRAY
   19     | basetype .
   76 allocator: basetype . '[' expr ']'

    TOK_NEWARRAY  shift, and go to state 85
    '['           shift, and go to state 86

    $default  reduce using rule 19 (type)


state 35

   25 basetype: typeid .

    $default  reduce using rule 25 (basetype)


state 36

    3 program: program function .

    $default  reduce using rule 3 (program)


state 37

   36 statement: block .

    $default  reduce using rule 36 (statement)


state 38

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 39

   37 statement: vardecl .

    $default  reduce using rule 37 (statement)


state 40

   38 statement: while .

    $default  reduce using rule 38 (statement)


state 41

   39 statement: ifelse .

    $default  reduce using rule 39 (statement)


state 42

   40 statement: return .

    $default  reduce using rule 40 (statement)


state 43

   41 statement: expr . ';'
   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ';'     shift, and go to state 101


state 44

   49 expr: binop .

    $default  reduce using rule 49 (expr)


state 45

   50 expr: unop .

    $default  reduce using rule 50 (expr)


state 46

   51 expr: allocator .

    $default  reduce using rule 51 (expr)


state 47

   80 call: callfront . ')'
   81     | callfront . exprs ')'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 102

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 103
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    exprs      go to state 104
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 48

   52 expr: call .

    $default  reduce using rule 52 (expr)


state 49

   54 expr: variable .

    $default  reduce using rule 54 (expr)


state 50

   55 expr: constant .

    $default  reduce using rule 55 (expr)


state 51

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 52

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 53

   45 ifelse: TOK_IF '(' . expr ')' statement
   46       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 105
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 54

   44 while: TOK_WHILE '(' . expr ')' statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 106
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 55

   47 return: TOK_RETURN ';' .

    $default  reduce using rule 47 (return)


state 56

   76 allocator: basetype . '[' expr ']'

    '['  shift, and go to state 86


state 57

   48 return: TOK_RETURN expr . ';'
   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ';'     shift, and go to state 107


state 58

   11 typedecl: TOK_IDENT .

    $default  reduce using rule 11 (typedecl)


state 59

   10 structh: TOK_STRUCT typedecl . '{'

    '{'  shift, and go to state 108


state 60

   24 basetype: TOK_STRING .
   74 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 109

    $default  reduce using rule 24 (basetype)


state 61

   26 typeid: TOK_IDENT .

    $default  reduce using rule 26 (typeid)


state 62

   75 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 110


state 63

   25 basetype: typeid .
   73 allocator: TOK_NEW typeid . '(' ')'

    '('  shift, and go to state 111

    $default  reduce using rule 25 (basetype)


state 64

   79 callfront: TOK_IDENT '(' .

    $default  reduce using rule 79 (callfront)


state 65

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   71 unop: TOK_ORD expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 71 (unop)


state 66

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   72 unop: TOK_CHR expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 72 (unop)


state 67

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   68 unop: '+' expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 68 (unop)


state 68

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   69 unop: '-' expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 69 (unop)


state 69

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   70 unop: '!' expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 70 (unop)


state 70

   53 expr: '(' expr . ')'
   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ')'     shift, and go to state 112


state 71

   32 block: '{' '}' .

    $default  reduce using rule 32 (block)


state 72

   43 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 80


state 73

   33 block: '{' stmts . '}'
   34 stmts: stmts . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 113
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    identdecl  go to state 72
    type       go to state 33
    basetype   go to state 34
    typeid     go to state 35
    block      go to state 37
    statement  go to state 114
    vardecl    go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42
    expr       go to state 43
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 74

   35 stmts: statement .

    $default  reduce using rule 35 (stmts)


state 75

    8 structdef: structh '}' .

    $default  reduce using rule 8 (structdef)


state 76

    9 structdef: structh strdecl . ';' '}'
   12 strdecl: strdecl . ';' fielddecl

    ';'  shift, and go to state 115


state 77

   13 strdecl: fielddecl .

    $default  reduce using rule 13 (strdecl)


state 78

   14 fielddecl: type . fielddeclid

    TOK_IDENT  shift, and go to state 116

    fielddeclid  go to state 117


state 79

   18 type: basetype . TOK_NEWARRAY
   19     | basetype .

    TOK_NEWARRAY  shift, and go to state 85

    $default  reduce using rule 19 (type)


state 80

   43 vardecl: identdecl '=' . expr ';'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 118
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 81

   28 params: '(' . identdecl
   29       | '(' .

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 61

    $default  reduce using rule 29 (params)

    identdecl  go to state 119
    type       go to state 33
    basetype   go to state 79
    typeid     go to state 35


state 82

   27 params: params . ',' identdecl
   30 function: identdecl params . ')' block
   31         | identdecl params . ')' ';'

    ','  shift, and go to state 120
    ')'  shift, and go to state 121


state 83

   17 identdeclid: TOK_IDENT .

    $default  reduce using rule 17 (identdeclid)


state 84

   16 identdecl: type identdeclid .

    $default  reduce using rule 16 (identdecl)


state 85

   18 type: basetype TOK_NEWARRAY .

    $default  reduce using rule 18 (type)


state 86

   76 allocator: basetype '[' . expr ']'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 122
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 87

   57 binop: expr TOK_EQ . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 123
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 88

   58 binop: expr TOK_NE . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 124
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 89

   59 binop: expr TOK_LT . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 125
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 90

   60 binop: expr TOK_LE . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 126
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 91

   61 binop: expr TOK_GT . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 127
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 92

   62 binop: expr TOK_GE . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 128
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 93

   56 binop: expr '=' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 129
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 94

   63 binop: expr '+' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 130
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 95

   64 binop: expr '-' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 131
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 96

   65 binop: expr '*' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 132
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 97

   66 binop: expr '/' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 133
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 98

   67 binop: expr '%' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 134
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 99

   83 variable: expr '[' . expr ']'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 135
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 100

   84 variable: expr '.' . fielddeclid

    TOK_IDENT  shift, and go to state 116

    fielddeclid  go to state 136


state 101

   41 statement: expr ';' .

    $default  reduce using rule 41 (statement)


state 102

   80 call: callfront ')' .

    $default  reduce using rule 80 (call)


state 103

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   78 exprs: expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100

    $default  reduce using rule 78 (exprs)


state 104

   77 exprs: exprs . ',' expr
   81 call: callfront exprs . ')'

    ','  shift, and go to state 137
    ')'  shift, and go to state 138


state 105

   45 ifelse: TOK_IF '(' expr . ')' statement
   46       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ')'     shift, and go to state 139


state 106

   44 while: TOK_WHILE '(' expr . ')' statement
   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ')'     shift, and go to state 140


state 107

   48 return: TOK_RETURN expr ';' .

    $default  reduce using rule 48 (return)


state 108

   10 structh: TOK_STRUCT typedecl '{' .

    $default  reduce using rule 10 (structh)


state 109

   74 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 141
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 110

   75 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 142
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 111

   73 allocator: TOK_NEW typeid '(' . ')'

    ')'  shift, and go to state 143


state 112

   53 expr: '(' expr ')' .

    $default  reduce using rule 53 (expr)


state 113

   33 block: '{' stmts '}' .

    $default  reduce using rule 33 (block)


state 114

   34 stmts: stmts statement .

    $default  reduce using rule 34 (stmts)


state 115

    9 structdef: structh strdecl ';' . '}'
   12 strdecl: strdecl ';' . fielddecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 61
    '}'         shift, and go to state 144

    fielddecl  go to state 145
    type       go to state 78
    basetype   go to state 79
    typeid     go to state 35


state 116

   15 fielddeclid: TOK_IDENT .

    $default  reduce using rule 15 (fielddeclid)


state 117

   14 fielddecl: type fielddeclid .

    $default  reduce using rule 14 (fielddecl)


state 118

   43 vardecl: identdecl '=' expr . ';'
   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ';'     shift, and go to state 146


state 119

   28 params: '(' identdecl .

    $default  reduce using rule 28 (params)


state 120

   27 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 61

    identdecl  go to state 147
    type       go to state 33
    basetype   go to state 79
    typeid     go to state 35


state 121

   30 function: identdecl params ')' . block
   31         | identdecl params ')' . ';'

    ';'  shift, and go to state 148
    '{'  shift, and go to state 29

    block  go to state 149


state 122

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   76 allocator: basetype '[' expr . ']'
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ']'     shift, and go to state 150


state 123

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   57      | expr TOK_EQ expr .
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 57 (binop)


state 124

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   58      | expr TOK_NE expr .
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 58 (binop)


state 125

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   59      | expr TOK_LT expr .
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 59 (binop)


state 126

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   60      | expr TOK_LE expr .
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 60 (binop)


state 127

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   61      | expr TOK_GT expr .
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 61 (binop)


state 128

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   62      | expr TOK_GE expr .
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '+'  shift, and go to state 94
    '-'  shift, and go to state 95
    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 62 (binop)


state 129

   56 binop: expr . '=' expr
   56      | expr '=' expr .
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100

    $default  reduce using rule 56 (binop)


state 130

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   63      | expr '+' expr .
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 63 (binop)


state 131

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   64      | expr '-' expr .
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '*'  shift, and go to state 96
    '/'  shift, and go to state 97
    '%'  shift, and go to state 98
    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 64 (binop)


state 132

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   65      | expr '*' expr .
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 65 (binop)


state 133

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   66      | expr '/' expr .
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 66 (binop)


state 134

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   67      | expr '%' expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    '['  shift, and go to state 99
    '.'  shift, and go to state 100

    $default  reduce using rule 67 (binop)


state 135

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   83 variable: expr . '[' expr ']'
   83         | expr '[' expr . ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ']'     shift, and go to state 151


state 136

   84 variable: expr '.' fielddeclid .

    $default  reduce using rule 84 (variable)


state 137

   77 exprs: exprs ',' . expr

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    basetype   go to state 56
    typeid     go to state 35
    expr       go to state 152
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 138

   81 call: callfront exprs ')' .

    $default  reduce using rule 81 (call)


state 139

   45 ifelse: TOK_IF '(' expr ')' . statement
   46       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    identdecl  go to state 72
    type       go to state 33
    basetype   go to state 34
    typeid     go to state 35
    block      go to state 37
    statement  go to state 153
    vardecl    go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42
    expr       go to state 43
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 140

   44 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    identdecl  go to state 72
    type       go to state 33
    basetype   go to state 34
    typeid     go to state 35
    block      go to state 37
    statement  go to state 154
    vardecl    go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42
    expr       go to state 43
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 141

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   74 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ')'     shift, and go to state 155


state 142

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   75 allocator: TOK_NEW basetype '[' expr . ']'
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100
    ']'     shift, and go to state 156


state 143

   73 allocator: TOK_NEW typeid '(' ')' .

    $default  reduce using rule 73 (allocator)


state 144

    9 structdef: structh strdecl ';' '}' .

    $default  reduce using rule 9 (structdef)


state 145

   12 strdecl: strdecl ';' fielddecl .

    $default  reduce using rule 12 (strdecl)


state 146

   43 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 43 (vardecl)


state 147

   27 params: params ',' identdecl .

    $default  reduce using rule 27 (params)


state 148

   31 function: identdecl params ')' ';' .

    $default  reduce using rule 31 (function)


state 149

   30 function: identdecl params ')' block .

    $default  reduce using rule 30 (function)


state 150

   76 allocator: basetype '[' expr ']' .

    $default  reduce using rule 76 (allocator)


state 151

   83 variable: expr '[' expr ']' .

    $default  reduce using rule 83 (variable)


state 152

   56 binop: expr . '=' expr
   57      | expr . TOK_EQ expr
   58      | expr . TOK_NE expr
   59      | expr . TOK_LT expr
   60      | expr . TOK_LE expr
   61      | expr . TOK_GT expr
   62      | expr . TOK_GE expr
   63      | expr . '+' expr
   64      | expr . '-' expr
   65      | expr . '*' expr
   66      | expr . '/' expr
   67      | expr . '%' expr
   77 exprs: exprs ',' expr .
   83 variable: expr . '[' expr ']'
   84         | expr . '.' fielddeclid

    TOK_EQ  shift, and go to state 87
    TOK_NE  shift, and go to state 88
    TOK_LT  shift, and go to state 89
    TOK_LE  shift, and go to state 90
    TOK_GT  shift, and go to state 91
    TOK_GE  shift, and go to state 92
    '='     shift, and go to state 93
    '+'     shift, and go to state 94
    '-'     shift, and go to state 95
    '*'     shift, and go to state 96
    '/'     shift, and go to state 97
    '%'     shift, and go to state 98
    '['     shift, and go to state 99
    '.'     shift, and go to state 100

    $default  reduce using rule 77 (exprs)


state 153

   45 ifelse: TOK_IF '(' expr ')' statement .
   46       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 157

    $default  reduce using rule 45 (ifelse)


state 154

   44 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 44 (while)


state 155

   74 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 74 (allocator)


state 156

   75 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 75 (allocator)


state 157

   46 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    identdecl  go to state 72
    type       go to state 33
    basetype   go to state 34
    typeid     go to state 35
    block      go to state 37
    statement  go to state 158
    vardecl    go to state 39
    while      go to state 40
    ifelse     go to state 41
    return     go to state 42
    expr       go to state 43
    binop      go to state 44
    unop       go to state 45
    allocator  go to state 46
    callfront  go to state 47
    call       go to state 48
    variable   go to state 49
    constant   go to state 50


state 158

   46 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 46 (ifelse)
